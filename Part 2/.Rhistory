index = max(which(data$V10 < 0))
if(is.infinite(index)){
res[m] = 0
}else{
res[m] = sum(data$V8[seq(1,index)])
data = data[-(seq(1,index)),]
}
res = vec()
res = vector()
if(is.infinite(index)){
res[m] = 0
}else{
res[m] = sum(data$V8[seq(1,index)])
data = data[-(seq(1,index)),]
}
data[seq(1,5),]
source('~/.active-rstudio-document')
source('~/trace/1_1.R')
source('~/trace/1_1.R')
plot(x,res/10e9, "l", col = "blue", xlab = "Time", ylab = "Data [GB]")
save.image("~/trace/1_1_results_new.RData")
plot(x,res/10e9, "l", col = "blue", xlab = "Time", ylab = "Data [GB]")
jpeg(filename="~/trace/Pictures/1_1_2.jpg")
plot(x,res/10e9, "l", col = "blue", xlab = "Time", ylab = "Data [GB]", main = "Data volume per half an hour")
dev.off()
load("~/trace/data_ipss&bytes.RData")
ipss = aggregate(data$V8, list(data$V1), sum)
rm(data)
gc()
load("~/trace/data_ipsd&bytes.RData")
ipsd = aggregate(data$V8, list(data$V2), sum)
rm(data)
gc()
ips = rbind(ipss,ipsd)
rm(ipss)
rm(ipsd)
gc()
save.image("~/trace/1_4_results.RData")
]
hist(data&, breaks = 20, col = 4, xlab = "Aggregated data", ylabel = "Frequency", main = "User aggregated data",)
ips[seq(1,5),]
library(plyr)
rename(d, c("Group.1" = "user", "x" = "Data volume"))
rename(ips, c("Group.1" = "user", "x" = "Data volume"))
ips[seq(1,5),]
ips$Group.1[seq(1,5),]
ips[1][seq(1,5),]
ips[2][seq(1,5),]
ips = aggregate(ips[2], list(ips[1]), sum)
length(ips[1])
length(ips[2])
list(length(ips[2]))
length(ips[,1])
ips = aggregate(ips[,2], list(ips[,1]), sum)
save.image("~/trace/1_4_results.RData")
load("~/trace/1_4_results.RData")
ips[seq(1,5)]
ips[seq(1,5),]
summary(ips[,2])
quantile(duration, c(seq(10,90, by = 10)))
quantile(ips[,2], c(seq(10,90, by = 10)))
quantile(ips[,2], c(seq(0.10,0.90, by = 0.10)))
quantile(ips[,2], c(seq(0.90,1, by = 0.01)))
quantile(ips[,2], 0.9)
quantile(ips[,2], 0.99)
quantile(ips[,2], 0.995)
users = data.frame(table(ips[2,]))
users = users[order(-ips[2,]),]
View(users)
users = ips[order(-ips[2,]),]
users = ips[order(ips[2,]),]
View(users)
View(users)
users = ips[order(ips[,2]),]
users[seq(1,5)]
users[seq(1,5),]
users = ips[-order(ips[,2]),]
users[seq(1,5),]
users = ips[order(-ips[,2]),]
users[seq(1,5),]
percentage = users[,2][seq(1,20)]/sum(users[,2])*100
barplot(percentage, names.arg = users[,1][seq(1,20)], xlab = "Users", ylab = "Percentage")
barplot(percentage, names.arg = users[,1][seq(1,20)], xlab = "Users", ylab = "Percentage")
library(plyr)
library(MASS)
data = read.table("C:/Users/Adrian/Documents/trace2/flows60sec.t2", sep="\t", header = FALSE, col.names = c("sip","dip","pro","OK","sport","dport","packets","bytes","flows","first","last"))
#############################---- Part 1 ----#############################
##Source Ips
sports= aggregate(data$flows, list(data$sport), sum)
sports = rename(sports, c("Group.1" = "sport","x" = "flows"))
sports = sports[order(-sports$flows),]
percentages = sports$flows / sum(sports$flows) * 100
barplot(percentages[seq(1,5)], names.arg = sports$sport[seq(1,5)], xlab = "Source ports", ylab = "Percentage", main = "Flow distribution by source ports")
##Destination Ips
dports= aggregate(data$flows, list(data$dport), sum)
dports = rename(sports, c("Group.1" = "sport","x" = "flows"))
dports = dports[order(-dports$flows),]
percentages = dports$flows / sum(dports$flows) * 100
barplot(percentages[seq(1,5)], names.arg = dports$dport[seq(1,5)], xlab = "Destination ports", ylab = "Percentage", main = "Flow distribution by destination ports")
#############################---- Part 4 ----#############################
#Histogram
hist(log10(data$bytes), breaks = 200, col = 4, xlab = "log10( Flow length [Bytes] )",
ylab = "Frequency", main = "Flows length distribution",)
#Empirical Cumulative Distribution Function
P = ecdf(log10(data$bytes))
plot(P, pch='.',main="ECDF of flows' length",xlab="log10( Flow length [Bytes]  )",
lwd=3)
#Summary statistics
summary(data$bytes)
#############################---- Part 5 ----#############################
#Fitting the distribution
parameters = fitdistr(log(data$bytes),"lognormal")
ppoints(2)
qlnorm(ppoints(10), meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2]),
log(data$bytes)
a = qlnorm(ppoints(10), meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2]),
log(data$bytes)
a = qlnorm(ppoints(10), meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2]),
log(data$bytes)
a = qlnorm(ppoints(10), meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2])
a
a = qlnorm(10, meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2])
a = hist(log10(data$bytes), breaks = 200, col = 4, xlab = "log10( Flow length [Bytes] )",
ylab = "Frequency", main = "Flows length distribution",)
plot(a)
library(MASS)
data1 <- read.table("C:\\Users\\Adrian\\Dropbox\\Universidad\\1ยบ de Master\\2. Second semester\\Network Traffic Measurement and Analysis\\Assignments\\Assignment 2\\S-38_3184_sampling.zip\\sampling.txt",
header=F,sep="", na.strings="?",
col.names=c("SIAT"))
str(data1)
summary(data1)
hist(data1$SIAT,breaks=200,col=4,main="Histogram of session inter arrival time",xlab="Time units")
#sampling of the data frame
vec<-matrix(0,1,10000)
View(vec)
?sample
?nrow
for (i in 1:10000){
d<-data1[sample(nrow(data1), 5), ]
vec[i]<-mean(d)
}
library(MASS)
hist(vec,breaks=150,main="Histogram of sampled SIAT with n=5",xlab="time",prob =TRUE)
hist(data1$SIAT,breaks=200,col=4,main="Histogram of session inter arrival time",xlab="Time units")
View(data1)
hist(vec,breaks=150,main="Histogram of sampled SIAT with n=5",xlab="time",prob =TRUE)
lines(density(vec),col="blue")
?density
?lines
plot(histogram)
histogram = hist(log10(data$bytes), breaks = 200, col = 4, xlab = "log10( Flow length [Bytes] )",
library(plyr)
library(MASS)
data = read.table("C:/Users/Adrian/Documents/trace2/flows60sec.t2", sep="\t", header = FALSE, col.names = c("sip","dip","pro","OK","sport","dport","packets","bytes","flows","first","last"))
#############################---- Part 1 ----#############################
##Source Ips
sports= aggregate(data$flows, list(data$sport), sum)
sports = rename(sports, c("Group.1" = "sport","x" = "flows"))
sports = sports[order(-sports$flows),]
percentages = sports$flows / sum(sports$flows) * 100
barplot(percentages[seq(1,5)], names.arg = sports$sport[seq(1,5)], xlab = "Source ports", ylab = "Percentage", main = "Flow distribution by source ports")
##Destination Ips
dports= aggregate(data$flows, list(data$dport), sum)
dports = rename(sports, c("Group.1" = "sport","x" = "flows"))
dports = dports[order(-dports$flows),]
percentages = dports$flows / sum(dports$flows) * 100
barplot(percentages[seq(1,5)], names.arg = dports$dport[seq(1,5)], xlab = "Destination ports", ylab = "Percentage", main = "Flow distribution by destination ports")
#############################---- Part 4 ----#############################
#Histogram
histogram = hist(log10(data$bytes), breaks = 200, col = 4, xlab = "log10( Flow length [Bytes] )",
ylab = "Frequency", main = "Flows length distribution",)
#Empirical Cumulative Distribution Function
P = ecdf(log10(data$bytes))
plot(P, pch='.',main="ECDF of flows' length",xlab="log10( Flow length [Bytes]  )",
lwd=3)
#Summary statistics
summary(data$bytes)
#############################---- Part 5 ----#############################
#Fitting the distribution
parameters = fitdistr(log(data$bytes),"lognormal")
plot(histogram)
lines(density(log10(data$bytes)),col="blue")
lines(log10(data$bytes),col="blue")
qqnorm(vec,col='blue',pch='.');
qqline(vec)
mean(vec)
sd(vec)
vec<-matrix(0,1,10000)
for (i in 1:10000){
d<-data1[sample(nrow(data1), 10), ]
vec[i]<-mean(d)
}
hist(vec,breaks=150,main="Histogram of sampled SIAT with n=10",xlab="Time",prob =TRUE)
lines(density(vec),col="blue")
# normal fit
qqnorm(vec,col='blue',pch='.');
qqline(vec)
mean(vec)
sd(vec)
vec<-matrix(0,1,10000)
for (i in 1:10000){
d<-data1[sample(nrow(data1), 100), ]
vec[i]<-mean(d)
}
hist(vec,breaks=150,main="Histogram of sampled SIAT with n=100",xlab="Time",prob =TRUE)
lines(density(vec),col="blue")
# normal fit
qqnorm(vec,col='blue',pch='.');
qqline(vec)
mean(vec)
sd(vec)
########
#	Part 2
dist_a <- read.table("C:\\Users\\Adrian\\Dropbox\\Universidad\\1ยบ de Master\\2. Second semester\\Network Traffic Measurement and Analysis\\Assignments\\Assignment 2\\S-38_3184_distr_a.zip\\distr_a.txt",
header=F,sep="", na.strings="?",
col.names=c("samples"))
hist(dist_a$samples,breaks=150,main="Histogram of distr_a.txt",prob=TRUE,xlab="samples")
lines(density(dist_a$samples),col="blue")
#gamma fit
fitdistr(dist_a$samples,"gamma") #shape=0.275900186,rate=0.240608572
fn2<-ecdf(dist_a$samples)
plot(fn2,verticals=TRUE,col.points=4,col.hor=2,col.vert=2,cex=.4,main="ecdf of flows",xlab="(Length [Bytes])",lwd=3)
X=rgamma(500, shape=0.275900186,rate=0.240608572)
P = ecdf(X)    # P gives the empirical CDF of X
plot(P,pch=',',main="ecdf of fitted distribution",xlab="(Length [Bytes])",lwd=3)
#curve(dgamma(x,shape=0.275900186,rate=0.240608572), lwd=2,col="blue",add=TRUE)
qqplot(qgamma(ppoints(300),shape=0.275900186,rate=0.240608572),dist_a$samples,main="Q-Q plot",ylab="samples",col='blue',pch=3)
abline(0,1)
#######	dist_b
dist_b <- read.table("C:\\Users\\Adrian\\Dropbox\\Universidad\\1ยบ de Master\\2. Second semester\\Network Traffic Measurement and Analysis\\Assignments\\Assignment 2\\S-38_3184_distr_b.zip\\distr_b.txt",
header=F,sep="", na.strings="?",
col.names=c("samples"))
hist(dist_b$samples,breaks=150,main="Histogram of distr_b.txt",prob=TRUE,xlab="samples")
logflows<- log(dist_b$samples)
hist(logflows,breaks=150,col=4,main="Histogram of logarithmic flows",xlab="log(Length [samples])")
plot(density(logflows), col="red")
fn2<-ecdf(logflows)
plot(fn2,verticals=TRUE,col.points=4,col.hor=2,col.vert=2,cex=.4,main="ecdf of flows",xlab="log(Length [Bytes])",)
fitdistr(logflows,"logistic") #location= 14.15962034 , scale=2.84681410
X=rlogis(500, location= 14.15962034 , scale=2.84681410)
P = ecdf(X)    # P is a function giving the empirical CDF of X
P(0.0)         # This returns the empirical CDF at zero (should be close to 0.5)
plot(P,pch=',',main="ecdf of proposed distribution",xlab="(Length [Bytes])",lwd=3)
qqplot(qlogis(ppoints(300),location= 14.15962034 , scale=2.84681410),logflows,main="Q-Q plot",ylab="samples",col='blue',pch=3)
abline(0,1)
#######	dist_c
dist_c <- read.table("C:\\Users\\Adrian\\Dropbox\\Universidad\\1ยบ de Master\\2. Second semester\\Network Traffic Measurement and Analysis\\Assignments\\Assignment 2\\S-38_3184_distr_c.zip\\distr_c.txt",
header=F,sep="", na.strings="?",
col.names=c("samples"))
hist((dist_c$samples),breaks=100,col="blue",main="Histogram of distr_c.txt",prob=TRUE,xlab="(samples)")
fitdistr(dist_c$samples,"poisson")# 6.05238095
fn2<-ecdf(dist_c$samples)
plot(fn2,verticals=TRUE,col.points=4,col.hor=2,col.vert=2,cex=.4,main="ecdf of flows",xlab="(Length [Bytes])",)
X=rpois(500, 6.05238095)
P = ecdf(X)    # P is a function giving the empirical CDF of X
plot(P,main="ecdf of proposed distribution",xlab="(Length [Bytes])",lwd=3)
qqplot(qpois(ppoints(500),6.05238095),dist_c$samples,main="Q-Q plot",ylab="samples",col="blue",pch=20)
abline(0,1)
########
#	part 3
flows<- read.table("C:\\Users\\Adrian\\Dropbox\\Universidad\\1ยบ de Master\\2. Second semester\\Network Traffic Measurement and Analysis\\Assignments\\Assignment 2\\S-38_3184_flows2.zip\\flows2.txt",
header=F,sep="", na.strings="?",
col.names=c("lengths"))
logflows<- log(flows$lengths)
plot(logflows,col="blue",pch='.',main="Scatterplot",ylab="log")
mean(flows$lengths)
median(flows$lengths)
x<-flows$lengths
#cum_avg<-cumsum(x)/seq_along(x)
#plot(seq_along(x),cum_avg,type="l",main="Running mean of flows",xlab="time units",ylab="Running mean [bytes]")
library(igraph)
u=running.mean(x, 1000)
plot.ts(u,main="Running mean for n=1000",ylab="kbits/s")
a = rlnorm(500, meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2])
library(plyr)
library(MASS)
data = read.table("C:/Users/Adrian/Documents/trace2/flows60sec.t2", sep="\t", header = FALSE, col.names = c("sip","dip","pro","OK","sport","dport","packets","bytes","flows","first","last"))
#############################---- Part 1 ----#############################
##Source Ips
sports= aggregate(data$flows, list(data$sport), sum)
sports = rename(sports, c("Group.1" = "sport","x" = "flows"))
sports = sports[order(-sports$flows),]
percentages = sports$flows / sum(sports$flows) * 100
barplot(percentages[seq(1,5)], names.arg = sports$sport[seq(1,5)], xlab = "Source ports", ylab = "Percentage", main = "Flow distribution by source ports")
##Destination Ips
dports= aggregate(data$flows, list(data$dport), sum)
dports = rename(sports, c("Group.1" = "sport","x" = "flows"))
dports = dports[order(-dports$flows),]
percentages = dports$flows / sum(dports$flows) * 100
barplot(percentages[seq(1,5)], names.arg = dports$dport[seq(1,5)], xlab = "Destination ports", ylab = "Percentage", main = "Flow distribution by destination ports")
#############################---- Part 4 ----#############################
#Histogram
histogram = hist(log10(data$bytes), breaks = 200, col = 4, xlab = "log10( Flow length [Bytes] )",
ylab = "Frequency", main = "Flows length distribution",)
#Empirical Cumulative Distribution Function
P = ecdf(log10(data$bytes))
plot(P, pch='.',main="ECDF of flows' length",xlab="log10( Flow length [Bytes]  )",
lwd=3)
#Summary statistics
summary(data$bytes)
#############################---- Part 5 ----#############################
#Fitting the distribution
parameters = fitdistr(log(data$bytes),"lognormal")
a = rlnorm(500, meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2])
histogram = hist(log10(data$bytes), breaks = 200, col = 4, xlab = "log10( Flow length [Bytes] )",
ylab = "Frequency", main = "Flows length distribution",)
lines(density(a),col="red")
plot()
plot(lines(density(a),col="red"))
lines(length(a),density(a),col="red")
length(density(a))
density(a)
lines(length(a), a, col="red")
plot(lines(density(a),col="red"))
lines(length(a), a, col="red")
?lines
lines(seq(1,length(a)), a, col="red")
plot(lines(seq(1,length(a)), a, col="red"))
parameters = fitdistr(log(data$bytes),"gamma")
parameters
qqplot(qlnorm(ppoints(50), shape =  parameters[[1]][1], rate = parameters[[1]][2]),
log(data$bytes), main="Q-Q plot",ylab="samples",col='blue',pch=3)
qqplot(qgamma(ppoints(50), shape =  parameters[[1]][1], rate = parameters[[1]][2]),
log(data$bytes), main="Q-Q plot",ylab="samples",col='blue',pch=3)
abline(0,1)
parameters = fitdistr(data$bytes,"gamma")
qqplot(qgamma(ppoints(50), shape =  parameters[[1]][1], rate = parameters[[1]][2]),
data$bytes, main="Q-Q plot",ylab="samples",col='blue',pch=3)
abline(0,1)
qqplot(qgamma(ppoints(100), shape =  parameters[[1]][1], rate = parameters[[1]][2]),
data$bytes, main="Q-Q plot",ylab="samples",col='blue',pch=3)
abline(0,1)
qqplot(qgamma(ppoints(10), shape =  parameters[[1]][1], rate = parameters[[1]][2]),
data$bytes, main="Q-Q plot",ylab="samples",col='blue',pch=3)
abline(0,1)
qqplot(qgamma(ppoints(500), shape =  parameters[[1]][1], rate = parameters[[1]][2]),
data$bytes, main="Q-Q plot",ylab="samples",col='blue',pch=3)
abline(0,1)
qqplot(qgamma(ppoints(10000), shape =  parameters[[1]][1], rate = parameters[[1]][2]),
data$bytes, main="Q-Q plot",ylab="samples",col='blue',pch=3)
abline(0,1)
parameters = fitdistr(log(data$bytes),"weibull")
warnings()
parameters
qqplot(qgamma(ppoints(50), shape =  parameters[[1]][1], scale = parameters[[1]][2]),
log(data$bytes), main="Q-Q plot",ylab="samples",col='blue',pch=3)
abline(0,1)
qqplot(qweibull(ppoints(50), shape =  parameters[[1]][1], scale = parameters[[1]][2]),
log(data$bytes), main="Q-Q plot",ylab="samples",col='blue',pch=3)
abline(0,1)
qqplot(qweibull(ppoints(50), shape =  parameters[[1]][1], scale = parameters[[1]][2]),
data$bytes, main="Q-Q plot",ylab="samples",col='blue',pch=3)
abline(0,1)
? ddlnorm
?dlnorm
hist(log(data$bytes), freq = FALSE, breaks = 100, xlim = c(0, quantile(ex, 0.99)))
hist(log(data$bytes), freq = FALSE, breaks = 100, xlim = c(0, quantile(log(data$bytes), 0.99)))
hist(log(data$bytes), freq = FALSE, breaks = 100)
hist(log(data$bytes), freq = TRUE, breaks = 100)
FALSE
hist(log(data$bytes), freq = FALSE, breaks = 100)
curve(dlnorm(100, meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2]), col = "red", add = TRUE)
curve(dlnorm(ppoints(50), meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2]), col = "red", add = TRUE)
curve(dlnorm(x, meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2]), col = "red", add = TRUE)
source('~/.active-rstudio-document')
View(data)
source('~/.active-rstudio-document')
View(data)
source('~/.active-rstudio-document')
View(data)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(data)
data_volume = sum(data&bytes)
View(data)
data_volume = sum(data$bytes)
data = read.table("C:/Users/Adrian/Documents/trace2/flows60sec.t2", sep="\t", header = FALSE, col.names = c("sip","dip","pro","OK","sport","dport","packets","bytes","flows","first","last"))
data[seq(1,)]
data[1,]
library(plyr)
library(MASS)
data = read.table("C:/Users/Adrian/Documents/trace2/flows60sec.t2", sep="\t", header = FALSE, col.names = c("sip","dip","pro","OK","sport","dport","packets","bytes","flows","first","last"))
#############################---- Part 1 ----#############################
##Source Ips
sports= aggregate(data$flows, list(data$sport), sum)
sports = rename(sports, c("Group.1" = "sport","x" = "flows"))
sports = sports[order(-sports$flows),]
percentages = sports$flows / sum(sports$flows) * 100
barplot(percentages[seq(1,5)], names.arg = sports$sport[seq(1,5)], xlab = "Source ports", ylab = "Percentage", main = "Flow distribution by source ports")
##Destination Ips
dports= aggregate(data$flows, list(data$dport), sum)
dports = rename(sports, c("Group.1" = "sport","x" = "flows"))
dports = dports[order(-dports$flows),]
percentages = dports$flows / sum(dports$flows) * 100
barplot(percentages[seq(1,5)], names.arg = dports$dport[seq(1,5)], xlab = "Destination ports", ylab = "Percentage", main = "Flow distribution by destination ports")
#############################---- Part 4 ----#############################
#Histogram
histogram = hist(log10(data$bytes), breaks = 200, col = 4, xlab = "log10( Flow length [Bytes] )",
ylab = "Frequency", main = "Flows length distribution",)
#Empirical Cumulative Distribution Function
P = ecdf(log10(data$bytes))
plot(P, pch='.',main="ECDF of flows' length",xlab="log10( Flow length [Bytes]  )",
lwd=3)
#Summary statistics
summary(data$bytes)
#############################---- Part 5 ----#############################
#Fitting the distribution using "log-normal" distribution
parameters = fitdistr(log(data$bytes),"lognormal")
hist(log(data$bytes), freq = FALSE, breaks = 100)
curve(dlnorm(x, meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2]), col = "red", add = TRUE)
histogram = hist(log10(data$bytes), frequency = FALSE, breaks = 200, col = 4, xlab = "log10( Flow length [Bytes] )",
ylab = "Frequency", main = "Flows length distribution",)
curve(dlnorm(x, meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2]), col = "red", add = TRUE)
histogram = hist(log10(data$bytes), freq = FALSE, breaks = 200, col = 4, xlab = "log10( Flow length [Bytes] )",
ylab = "Frequency", main = "Flows length distribution")
curve(dlnorm(x, meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2]), col = "red", add = TRUE)
parameters = fitdistr(log10(data$bytes),"lognormal")
histogram = hist(log10(data$bytes), freq = FALSE, breaks = 200, col = 4, xlab = "log10( Flow length [Bytes] )",
ylab = "Frequency", main = "Flows length distribution")
curve(dlnorm(x, meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2]), col = "red", add = TRUE)
qqplot(qlnorm(ppoints(50), meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2]),
log10(data$bytes), main="Q-Q plot",ylab="samples",col='blue',pch=3)
abline(0,1)
library(vcd)
library(vcd)
require(vcd)
install.packages("vcd")
library("vcd", lib.loc="~/R/win-library/3.1")
install.packages(c("manipulate", "Rcpp"))
detach("package:vcd", unload=TRUE)
require(vcd)
library(vcd)
?ks.test
ks.test(log10(data$bytes), "plnorm", meanlog =  parameters[[1]][1], sdlog = parameters[[1]][2]) # p-value > 0.05 -> distribution not refused
parameters = fitdistr(log10(data$bytes,"gamma"))
parameters = fitdistr(log10(data$bytes),"gamma")
histogram = hist(log10(data$bytes), freq = FALSE, breaks = 200, col = 4, xlab = "log10( Flow length [Bytes] )",
ylab = "Frequency", main = "Flows length distribution")
curve(dgamma(x, shape =  parameters[[1]][1], rate = parameters[[1]][2]), col = "red", add = TRUE)
qqplot(qgamma(ppoints(50), shape =  parameters[[1]][1], rate = parameters[[1]][2]),
data$bytes, main="Q-Q plot",ylab="samples",col='blue',pch=3)
qqplot(qgamma(ppoints(50), shape =  parameters[[1]][1], rate = parameters[[1]][2]),
log10(data$bytes), main="Q-Q plot",ylab="samples",col='blue',pch=3)
abline(0,1)
ks.test(log10(data$bytes), "pgamma", shape =  parameters[[1]][1], rate = parameters[[1]][2]) # p-value > 0.05 -> distribution not refused
parameters = fitdistr(log10(data$bytes),"weibull")
parameters
parameters = fitdistr(log10(data$bytes),"weibull")
histogram = hist(log10(data$bytes), freq = FALSE, breaks = 200, col = 4, xlab = "log10( Flow length [Bytes] )",
ylab = "Frequency", main = "Flows length distribution")
curve(dweibull(x, shape =  parameters[[1]][1], scale = parameters[[1]][2]), col = "red", add = TRUE)
qqplot(qweibull(ppoints(50), shape =  parameters[[1]][1], scale = parameters[[1]][2]),
log10(data$bytes), main="Q-Q plot",ylab="samples",col='blue',pch=3)
parameters
abline(0,1)
ks.test(log10(data$bytes), "pweibull", shape =  parameters[[1]][1], scale = parameters[[1]][2]) # p-value > 0.05 -> distribution not refused
library(plyr)
library(MASS)
library(vcd)
data = read.table("flows60sec.t2", sep="\t", header = FALSE, col.names = c("sip","dip","pro","OK","sport","dport","packets","bytes","flows","first","last"))
#############################---- Part 1 ----#############################
##Source Ips
sports= aggregate(data$flows, list(data$sport), sum)
sports = rename(sports, c("Group.1" = "sport","x" = "flows"))
sports = sports[order(-sports$flows),]
percentages = sports$flows / sum(sports$flows) * 100
barplot(percentages[seq(1,5)], names.arg = sports$sport[seq(1,5)], xlab = "Source ports", ylab = "Percentage", main = "Flow distribution by source ports")
##Destination Ips
dports= aggregate(data$flows, list(data$dport), sum)
dports = rename(sports, c("Group.1" = "sport","x" = "flows"))
dports = dports[order(-dports$flows),]
percentages = dports$flows / sum(dports$flows) * 100
barplot(percentages[seq(1,5)], names.arg = dports$dport[seq(1,5)], xlab = "Destination ports", ylab = "Percentage", main = "Flow distribution by destination ports")
#############################---- Part 4 ----#############################
#Histogram
jpeg("../Pictures/2_4_hist.jpg", 1266, 484)
histogram = hist(log10(data$bytes), breaks = 200, col = 4, xlab = "log10( Flow length [Bytes] )",
ylab = "Frequency", main = "Flows length distribution")
dev.off()
data = read.table("flows60sec.t2", sep="\t", header = FALSE, col.names = c("sip","dip","pro","OK","sport","dport","packets","bytes","flows","first","last"))
data = read.table("flows60sec.t2", sep="\t", header = FALSE, col.names = c("sip","dip","pro","OK","sport","dport","packets","bytes","flows","first","last"))
load("~/trace/Day_22_timedata.RData")
data[1:2,]
setwd("C:/Users/Adrian/Dropbox/Universidad/1ยบ de Master/2. Second semester/Network Traffic Measurement and Analysis/Assignments/Final Assignment/Part 2")
load(paste("C:/Users/Adrian/Documents/trace/data_ips.RData", sep="", collapse = NULL))
ips = data
rm(data)
gc()
load(paste("C:/Users/Adrian/Documents/trace/data_bytes.RData", sep="", collapse = NULL))
bytes = data
rm(data)
gc()
load(paste("C:/Users/Adrian/Documents/trace/data_flows.RData", sep="", collapse = NULL))
flows = data
rm(data)
gc()
###By flow
pairs = do.call(paste, c(ips[c("V1", "V2")], sep = "-"))
pairs1 = data.frame(table(pairs))
pairs1 = pairs[order(-pairs1$Freq),]
x = seq(1,length(pairs1$Freq))
jpeg("../Pictures/1_3_flows.jpg", 1266, 484)
plot(x, pairs1$Freq, log = "xy", xlab = "Rank", ylab = "Flows", main = "Zipf plot -> IP pairs by flows")
dev.off()
#By data volume
pairs = data.frame(pairs = pairs)
pairs = cbind(pairs, bytes = bytes$V8)
pairs = aggregate(pairs$bytes, list(pairs$pairs), sum)
pairs = pairs[order(-pairs$x),]
jpeg("../Pictures/1_3_traffic.jpg", 1266, 484)
plot(x, pairs$x, log = "xy", xlab = "Rank", ylab = "Data volume [Bytes]", main = "Zipf plot -> IP pairs by data volume")
dev.off()
